require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe AlbumsController do

  # This should return the minimal set of attributes required to create a valid
  # Album. As you add validations to Album, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) { attributes_for(:album) }
  let(:topic) { create(:topic) }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # AlbumsController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  describe 'GET show' do
    it 'assigns the requested album as @album' do
      album = create(:album)
      get :show, {id: album.to_param}, valid_session
      expect(assigns(:album)).to eq(album)
    end
  end

  describe 'GET new' do
    it 'assigns a new album as @album' do
      get :new, {topic_id: topic}, valid_session
      expect(assigns(:album)).to be_a_new(Album)
    end
  end

  describe 'POST create' do
    describe 'with valid params' do
      it 'creates a new Album' do
        expect {
          xhr :post, :create, {album: valid_attributes, topic_id: topic}, valid_session
        }.to change(Album, :count).by(1)
      end

      it 'assigns a newly created album as @album' do
        xhr :post, :create, {album: valid_attributes, topic_id: topic}, valid_session
        expect(assigns(:album)).to be_a(Album)
        expect(assigns(:album)).to be_persisted
      end
    end

    describe 'with invalid params' do
      it 'assigns a newly created but unsaved album as @album' do
        # Trigger the behavior that occurs when invalid params are submitted
        xhr :post, :create, {album: {'title' => 'invalid value'}, topic_id: topic}, valid_session
        expect(assigns(:album)).to be_a_new(Album)
      end

      it "re-renders the 'new' template" do
        # Trigger the behavior that occurs when invalid params are submitted
        xhr :post, :create, {album: {'title' => 'invalid value'}, topic_id: topic}, valid_session
        expect(response).to render_template('new')
      end
    end
  end

  describe 'PUT update' do
    describe 'with updatable album' do
      let!(:album) { create(:album, topic: topic) }

      describe 'with valid params' do
        let(:attributes_for_update) { {pictures_attributes: [attributes_for(:picture)]} }

        it 'updates the requested album' do
          expect_any_instance_of(Album).to receive(:update_attributes).with(attributes_for_update).and_call_original
          put :update, {id: album.to_param, album: attributes_for_update}, valid_session
        end

        it 'assigns the requested album as @album' do
          put :update, {id: album.to_param, album: attributes_for_update}, valid_session
          expect(assigns(:album)).to eq(album)
        end

        it 'redirects to the album' do
          put :update, {id: album.to_param, album: attributes_for_update}, valid_session
          expect(response).to redirect_to(album)
        end
      end
    end

    describe 'with not updatable album' do
      let!(:album) { create(:album, topic: topic, updatable: false) }

      describe 'with valid params' do
        let(:attributes_for_update) { {pictures_attributes: [attributes_for(:picture)]} }

        it 'forbids update this album' do
          expect {
            put :update, {id: album.to_param, album: attributes_for_update}, valid_session
          }.to raise_error CanCan::AccessDenied
        end
      end
    end

  end

  describe 'DELETE destroy' do
    let!(:album) { create(:album, topic: topic) }
    before { sign_in create(:admin) }

    it 'destroys the requested album' do
      expect {
        delete :destroy, {id: album.to_param}, valid_session
      }.to change(Album, :count).by(-1)
    end

    it 'redirects to the albums list' do
      delete :destroy, {id: album.to_param}, valid_session
      expect(response).to redirect_to(topic_url(topic))
    end
  end

end
