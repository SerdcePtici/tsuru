require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe LessonsController do

  # This should return the minimal set of attributes required to create a valid
  # Lesson. As you add validations to Lesson, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) { attributes_for(:lesson) }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # LessonsController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  describe 'GET index' do
    it 'assigns all lessons as @lessons' do
      lesson = create(:lesson)
      get :index, {}, valid_session
      expect(assigns(:lessons)).to eq([lesson])
    end
  end

  describe 'GET show' do
    it 'assigns the requested lesson as @lesson' do
      lesson = create(:lesson)
      get :show, {id: lesson.to_param}, valid_session
      expect(assigns(:lesson)).to eq(lesson)
    end
  end

  describe 'GET new' do
    it 'assigns a new lesson as @lesson' do
      get :new, {}, valid_session
      expect(assigns(:lesson)).to be_a_new(Lesson)
    end
  end

  describe 'POST create' do
    describe 'with valid params' do
      it 'creates a new Lesson' do
        expect {
          xhr :post, :create, {lesson: valid_attributes}, valid_session
        }.to change(Lesson, :count).by(1)
      end

      it 'assigns a newly created lesson as @lesson' do
        xhr :post, :create, {lesson: valid_attributes}, valid_session
        expect(assigns(:lesson)).to be_a(Lesson)
        expect(assigns(:lesson)).to be_persisted
      end
    end

    describe 'with invalid params' do
      it 'assigns a newly created but unsaved lesson as @lesson' do
        xhr :post, :create, {lesson: {}}, valid_session
        expect(assigns(:lesson)).to be_a_new(Lesson)
      end

      it "re-renders the 'new' template" do
        xhr :post, :create, {lesson: {'title' => 'invalid value'}}, valid_session
        expect(response).to render_template('new')
      end
    end
  end

  describe 'DELETE destroy' do
    let!(:lesson) { create(:lesson) }
    before { sign_in create(:admin) }

    it 'destroys the requested lesson' do
      expect {
        delete :destroy, {id: lesson.to_param}, valid_session
      }.to change(Lesson, :count).by(-1)
    end

    it 'redirects to the lessons list' do
      delete :destroy, {id: lesson.to_param}, valid_session
      expect(response).to redirect_to(lessons_url)
    end
  end

end
